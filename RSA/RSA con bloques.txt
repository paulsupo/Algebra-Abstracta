#include <iostream>
#include <string>
#include <sstream>// zz to string
#include <NTL/ZZ.h>
#include <vector>
#include <random>
#include <NTL/vector.h>
using namespace std;
using namespace NTL;

class RSA {
	ZZ claveprivada, p, q, phiden;
public:
	RSA(ZZ), RSA(ZZ, ZZ);
	ZZ modulozz(ZZ, ZZ), mcd(ZZ, ZZ), inversa(ZZ, ZZ), potenciar(ZZ, ZZ), modular_pow(ZZ, ZZ, ZZ), randomprimo2(int);
	ZZ stringtozz(string);
	//bool test_primo(ZZ);
	ZZ clavepublica, n, maximo;
	int zztoint(ZZ), moduloint(int, int);
	string inttostring(int), zztostring(ZZ);
	string abecedario = "ABCDEFGHIJKLMNOPQRSTUVWXYZ,.-( )abcdefghijklmnopqrstuvwxyz<>*1234567890";
	//string abecedario = "abcdefghijklmnopqrstuvwxyz( )ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
	string cifrado(string), descifrado(string),  igualar(string, ZZ), completar(string, int);
};

//p: 191473  q: 138821   N: 26580473333   Fi de N: 26580143040   Clave publica(e): 557   Clave privada(d): 10641601253
//697845285
RSA::RSA(ZZ maximo_bits) {
	maximo = maximo_bits;
	p = RandomPrime_ZZ(18);
	p = 17;
	q = RandomPrime_ZZ(18);
	q = 59;
	n = p * q;
	phiden = (p - 1) * (q - 1);
	clavepublica = RandomPrime_ZZ(10);
	clavepublica = 3;
	claveprivada = modulozz(clavepublica, phiden);
	claveprivada = inversa(claveprivada, phiden);
	claveprivada = modulozz(claveprivada, phiden);
	cout << "p: " << p << "  " << "q: " << q << "   ";
	cout << "N: " << n << "   ";
	cout << "Fi de N: " << phiden << "   ";
	cout << "Clave publica(e): " << clavepublica << "   ";
	cout << "Clave privada(d): " << claveprivada << "   " << endl;
}

RSA::RSA(ZZ nreceptor, ZZ clave_publica) {
	clavepublica = clave_publica;
	n = nreceptor;
}

int RSA::moduloint(int a, int b) {
	if (a >= 0)
		return a - (a / b) * b;
	else
		return a - ((a / b) - 1) * b;
}

ZZ RSA::modulozz(ZZ a, ZZ b) {
	if (a >= 0)
		return a - (a / b) * b;
	else
		return a - ((a / b) - 1) * b;
}

ZZ RSA::mcd(ZZ a, ZZ b) {
	ZZ r;
	while (true) {
		r = modulozz(a, b);
		if (r == 0)
			return b;
		if (r > (b / 2)) {
			r = b - r;
		}
		a = b;
		b = r;
	}
}

ZZ RSA::inversa(ZZ entero, ZZ modulonum){
	if (mcd(entero, modulonum) != 1) {
		cout << "Este numero no tiene inversa" << endl;
		return ZZ(0);
	}

	ZZ modulo_cero = modulonum, variable, cociente;
	ZZ variable0, variable1;
	variable0 = 0, variable1 = 1;
	while (entero > 1) {
		cociente = entero / modulonum;
		variable = modulonum;
		modulonum = modulozz(entero, modulonum);
		entero = variable;
		variable = variable0;
		variable0 = variable1 - cociente * variable0;
		variable1 = variable;
	}
	if (variable1 < 0)
		variable1 += modulo_cero;
	return variable1;
}

ZZ RSA::potenciar(ZZ base, ZZ elevar) {
	ZZ total, i;
	total = 1; i = 0;
	for (i; i < elevar; i++) {
		total *= base;
	}
	return total;
}

ZZ RSA::modular_pow(ZZ base, ZZ exponenete, ZZ mod) {
	ZZ result, dos;
	result = 1, dos = 2;
	while (exponenete > 0) {
		if (modulozz(exponenete,dos) == 1)
			result = (result * base) % mod;
		exponenete >>= 1;
		base = (base * base) % mod;
	}
	return result;
}

string RSA::inttostring(int a){
	ostringstream temp;
	temp << a;
	return temp.str();
}

string RSA::zztostring(ZZ num) {
	stringstream buffer;
	buffer << num;
	return buffer.str();
}

int RSA::zztoint(ZZ num) {
	string temp = zztostring(num);
	int numero = stoi(temp);
	return numero;
}

ZZ RSA::stringtozz(string str){
	ZZ z(NTL::INIT_VAL, str.c_str());
	return z;
}

int random(int max) {
	random_device dev;
	mt19937 rng(dev());
	uniform_int_distribution<mt19937::result_type> random(0, max);
	return random(rng);
}
/*
bool RSA::test_primo(ZZ num) {
	ZZ limite, j;
	limite = sqtr(num);
	for (j = 2; j <= limite; j++) {
		if (modulozz(num, j) == 0) {
			return false;
		}
	}
	return true;
}

ZZ RSA::randomprimo2(int numero) {
	Vec<ZZ> primos; ZZ dos, pos, temp, rand, longitud;
	dos = 2, temp = numero;
	ZZ minimo = (potenciar(dos, temp)) / 2;
	ZZ maximo = (potenciar(dos, temp)) - 1;
	cout << "El numero esta en el intervalo de " << minimo << " a " << maximo << endl;
	for (ZZ i = minimo; i <= maximo; i++) {
		if (test_primo(i) == true)
			primos+=(i);
	}
	int ran = random(primos.length() * 5); long size = primos.length();
	rand = ran, longitud = size;
	ZZ pos = modulozz(rand, longitud);
	Vec<ZZ>::iterator it = primos.begin() + pos;
	return *it;
}*/

string RSA::igualar(string letra, ZZ maximo) {
	string ret;
	ZZ hueco = ZZ(letra.size());
	hueco=maximo-hueco;
	for (int i = 0; i < hueco; i++)
		ret += "0";
	ret += letra;
	return ret;
}

string RSA::completar(string mensaje, int division) {
	string dev;
	int size = mensaje.size();
	size = moduloint(size, division);
	size = division - size;
	if (moduloint(size, 2) == 0) {
		for (int i = 0; i < size / 2; i++)
			mensaje += "25";
	}
	if (moduloint(size, 2) != 0) {
		for (int i = 0; i < size / 2; i++) 
			mensaje += "25";
		mensaje += "7";
	}
	return mensaje;
}

string RSA::cifrado(string mensaje) {
	cout << "-------------------------CIFRADO---------------------------------" << endl;
	string texto, conv, temp, temp2, igua, igua2;
	ZZ pos, tam, pos2;
	tam = abecedario.size();
	for (int i = 0; i < mensaje.size(); i++) {
		pos = abecedario.find(mensaje[i]);
		igua = zztostring(pos);
		igua2 = zztostring(tam);
		conv += igualar(igua, ZZ(igua2.size()));
	}
	string ntemp = zztostring(n);
	int bloques = ntemp.size() - 1;
	conv = completar(conv, bloques);
	for (int i = 0; i < conv.size(); i += bloques) {
		for (int j = 0; j < bloques; j++) {
			temp += conv[i+j];
		}
		pos2 = stringtozz(temp);
		pos2 = modular_pow(pos2, clavepublica, n);
		temp2 = zztostring(pos2);
		temp2 = igualar(temp2,ZZ(ntemp.size()));
		texto += temp2;
		temp.clear();
		temp2.clear();
	}
	return texto;
}

string RSA::descifrado(string cifrado) {
	cout << "-------------------------DESCIFRADO---------------------------------" << endl;
	string texto, conv, temp, temp2;
	ZZ pos, tam, pos2;
	int indice;
	string descifrado;
	string ntemp = zztostring(n);
	int bloques = ntemp.size();

	for (int i = 0; i < cifrado.size(); i += bloques) {
		for (int j = 0; j < bloques; j++) {
			temp += cifrado[i + j];
		}
		pos2 = stringtozz(temp);
		pos2 = modular_pow(pos2, claveprivada, n);
		temp2 = zztostring(pos2);
		tam = ZZ(bloques - 1);
		temp2 = igualar(temp2,tam);
		conv += temp2;
		temp.clear();
		temp2.clear();
	}

	int tamabc = abecedario.size();
	string tama = inttostring(tamabc);
	tamabc = tama.size();
	for (int i = 0; i < conv.size(); i += tamabc) {
		for (int j = 0; j < tamabc; j++) {
			temp += conv[i + j];
		}
		indice = stoi(temp);
		temp2 = abecedario[indice];
		descifrado += temp2;

		temp.clear();
	}
	return descifrado;
}

//p: 254827  q : 255371   N : 65075425817   Fi de N : 65074915620   Clave publica(e) : 571   Clave privada(d) : 41255900971
//Cifrado : 11204466623
//Descifrado : s

int main() {
	ZZ maximo(5);
	RSA emisor(maximo);

	ZZ n, clave;
	clave = 3, n = 1003;
	//cout << "coloque la N" << endl;
	//cin >> n;
	//RSA emisor(receptor.n, receptor.clavepublica);
	RSA receptor(n, clave);

	string mensaje = "COMEHERE";
	string cifrado = receptor.cifrado(mensaje);
	cout << "Cifrado: " << cifrado << endl;

	string cif = cifrado;
	string descifrado = emisor.descifrado(cif);
	cout << "Descifrado: " << descifrado << endl;
}