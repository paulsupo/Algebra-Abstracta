#include <iostream>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <fstream>
#include <vector>
using namespace std;
class Vigenere
{
    string clave;
public:
    Vigenere(string);
    void escribirdescifrado(string);
    void escribircifrado(string);
    void cifrado1();
    void descifrado1();
    void cifrado2();
    void descifrado2();
    int modulo(int, int);
    string abc = "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ,.";
    void igualar(string&, string&);
    string mensaje;
};













Vigenere::Vigenere(string clave_n) {
    clave = clave_n;
}

void Vigenere::igualar(string& mensaje, string& clave) {
    int max = mensaje.size();
    for (int i = clave.size(), j = 0; i < max; i++, j++) {
        if (j >= clave.size())
            j = modulo(j, clave.size());
        clave += clave[j];
    }
}

void Vigenere::escribirdescifrado(string descifrado) {
    ofstream archivo2;
    archivo2.open("descifrado.txt", ios::out);

    if (archivo2.fail()) {
        cout << "No se pudo escribir el descifrado";
        exit(1);
    }
    archivo2 << descifrado;
    archivo2.close();
}

void Vigenere::escribircifrado(string cifrado) {
    ofstream archivo2;
    archivo2.open("cifrado.txt", ios::out);

    if (archivo2.fail()) {
        cout << "No se pudo escribir el cifrado";
        exit(1);
    }
    archivo2 << cifrado;
    archivo2.close();
}

void Vigenere::cifrado1() {
    ifstream archivo;
    archivo.open("texto.txt", ios::in);
    if (archivo.fail()) {
        cout << "No se pudo obtener el mensaje para el cifrado";
        exit(1);
    }

    string devuelvo, mensaje;

    while (!archivo.eof()) {
        getline(archivo, mensaje);
    }
    archivo.close();

    igualar(mensaje, clave);
    for (int i = 0; i < mensaje.size(); i++) {
        int uno = abc.find(mensaje[i]);
        int dos = abc.find(clave[i]);
        dos += uno;
        if (dos >= abc.size())
            dos = modulo(dos, abc.size());

        devuelvo += abc[dos];
    }
    cout << devuelvo << endl;
    escribircifrado(devuelvo);
}

void Vigenere::cifrado2() {
    string devuelvo, mensaje, abc;

    ifstream archivo;
    archivo.open("texto.txt", ios::in);
    if (archivo.fail()) {
        cout << "No se pudo obtener el mensaje para el cifrado";
        exit(1);
    }

    while (!archivo.eof()) {
        getline(archivo, mensaje);
    }
    archivo.close();

    ifstream archivo2;
    archivo2.open("alfabeto.txt", ios::in);
    if (archivo2.fail()) {
        cout << "No se pudo obtener el alfabeto para ASCII(cifrado)";
        exit(1);
    }

    while (!archivo2.eof()) {
        getline(archivo2, abc);
    }
    archivo2.close();

    igualar(mensaje, clave);//////////////////////////////////////////////////////////
    for (int i = 0; i < mensaje.size(); i++) {
        int uno = abc.find(mensaje[i]);
        int dos = abc.find(clave[i]);
        dos += uno + 32;
        if (dos >= abc.size() - 1) 
            dos = modulo(dos, abc.size() - 1);
        devuelvo += abc[dos];
    }
    cout << devuelvo << endl;
    escribircifrado(devuelvo);
}

void Vigenere::descifrado1() {
    ifstream archivo;
    archivo.open("cifrado.txt", ios::in);
    if (archivo.fail()) {
        cout << "No se pudo obtener el cifrado para el descifrado";
        exit(1);
    }

    string devuelvo, mensaje;
    while (!archivo.eof()) {
        getline(archivo, mensaje);
    }
    archivo.close();

    for (int i = 0; i < mensaje.size(); i++) {
        int uno = abc.find(clave[i]);
        int dos = abc.find(mensaje[i]);
        dos -= uno;
        if (dos >= abc.size())
            dos = modulo(dos, abc.size());

        devuelvo += abc[dos];
    }
    cout << devuelvo << endl;
    escribirdescifrado(devuelvo);
}

void Vigenere::descifrado2() {
    string devuelvo, mensaje, abc;
    ifstream archivo;
    archivo.open("cifrado.txt", ios::in);
    if (archivo.fail()) {
        cout << "No se pudo obtener el cifrado para el descifrado";
        exit(1);
    }

    while (!archivo.eof()) {
        getline(archivo, mensaje);
    }
    archivo.close();

    ifstream archivo2;
    archivo2.open("alfabeto.txt", ios::in);
    if (archivo2.fail()) {
        cout << "No se pudo obtener el alfabeto para ASCII(descifrado)";
        exit(1);
    }

    while (!archivo2.eof()) {
        getline(archivo2, abc);
    }
    archivo2.close();

    ///////////////////////////////////////////////////////////////////////////////////
    for (int i = 0; i < mensaje.size(); i++) {
        int uno = abc.find(clave[i]);
        int dos = abc.find(mensaje[i]);
        dos -= uno; dos -= 32;
        if (dos < 0) 
            dos = modulo(dos, abc.size() - 1);
        devuelvo += abc[dos];
    }
    cout << devuelvo << endl;
    escribirdescifrado(devuelvo);
}


int Vigenere::modulo(int a, int b) {
    if (a >= 0)
        return a - (a / b) * b;
    else
        return a - ((a / b) - 1) * b;
}










int main() {
    int orden;
    string clave;
    cout << "Introduzca la clave: " << endl;
    getline(cin, clave);
    cout << "Seleccione el alfabeto:" << endl << "Seleccione 1 para Numerico " << endl << "Seleccione 2 para ASCCI" << endl;
    cin >> orden;
    Vigenere algo(clave);
    if (orden == 1) {
        algo.cifrado1();
        algo.descifrado1();
    }

    if (orden == 2) {
        algo.cifrado2();
        algo.descifrado2();
    }
    return 0;
}